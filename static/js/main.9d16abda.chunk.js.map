{"version":3,"sources":["hooks/store.js","components/navigation/navigation.js","components/gradient-box/gradient-box.js","containers/gradients-container/gradient-container.js","App.js","serviceWorker.js","hooks/gradients-store.js","index.js"],"names":["globalState","listeners","actions","useStore","setStore","useState","global","useEffect","push","filter","listener","actionType","payload","newState","initStore","userActions","initialStore","navigation","className","gradient_box","props","name","id","alt","style","backgroundImage","colors","Gradient_container","gradientBoxes","gradients","map","element","key","App","Boolean","window","location","hostname","match","configureGradientStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4NAEIA,EAAc,GACdC,EAAY,GACZC,EAAU,GAEDC,EAAW,WACpB,IAAMC,EAAWC,mBAASC,GAAQ,GAmBlC,OATAC,qBAAU,WAGN,OAFAN,EAAUO,KAAKJ,GAEP,WACJH,EAAUQ,QAAO,SAAAC,GAAQ,OAAIA,IAAaN,QAG/C,CAACA,IAEG,CAACJ,EAjBS,SAACW,EAAYC,GAC1B,IAAMC,EAAWX,EAAQS,GAAYX,EAAaY,GAClDZ,EAAW,2BAAQA,GAAgBa,GAFG,oBAIjBZ,GAJiB,IAItC,6BACIS,EADJ,SACaV,IALyB,kCAoBjCc,EAAY,SAACC,EAAaC,GACnChB,EAAW,2BAAQA,GAAgBgB,GACnCd,EAAO,2BAAQA,GAAYa,M,6NChBhBE,G,kBAZI,WACf,OACI,yBAAKC,UAAU,cACX,yBAAKA,UAAU,QACX,oCACA,yBAAKA,UAAU,cACf,8C,eCgBDC,G,MAtBM,SAACC,GAElB,OACI,yBAAKF,UAAU,OACX,yBAAKA,UAAU,OACX,+BAAKE,EAAMC,KAAX,KACA,+BAAKD,EAAME,GAAX,MAGJ,yBACIC,IAAI,GACJC,MAAO,CAAEC,gBAAgB,2BAAD,OAA6BL,EAAMM,OAAO,GAA1C,8BAAkEN,EAAMM,OAAO,GAA/E,WACxBR,UAAU,oBAEd,yBAAKA,UAAU,UACX,0CAASE,EAAMM,OAAO,GAAtB,oBAAiCN,EAAMM,OAAO,IAA9C,KACA,6CCCDC,EAdY,SAACP,GAExB,IAEMQ,EAFQzB,cAAW,GAEG0B,UAAUC,KAAI,SAAAC,GAAO,OAAI,kBAAC,EAAD,CAAaC,IAAKD,EAAQT,GAAIA,GAAIS,EAAQT,GAAID,KAAMU,EAAQV,KAAMK,OAAQK,EAAQL,YAEvI,OACI,yBAAKR,UAAU,aACVU,ICEEK,MAXf,WACE,OACE,yBAAKf,UAAU,OAEb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DChBiB,WAMnBxB,aAJgB,cAIG,CACfe,UAAW,CACP,CAACP,GAAI,MAAOD,KAAM,aAAcK,OAAQ,CAAC,SAAU,WACnD,CAACJ,GAAI,MAAOD,KAAM,aAAcK,OAAQ,CAAC,SAAU,WACnD,CAACJ,GAAI,MAAOD,KAAM,gBAAiBK,OAAQ,CAAC,SAAU,WACtD,CAACJ,GAAI,MAAOD,KAAM,cAAeK,OAAQ,CAAC,SAAU,WACpD,CAACJ,GAAI,MAAOD,KAAM,YAAaK,OAAQ,CAAC,SAAU,WAClD,CAACJ,GAAI,MAAOD,KAAM,gBAAiBK,OAAQ,CAAC,SAAU,eCRlEa,GAEAC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9d16abda.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nlet globalState = {};\nlet listeners = [];\nlet actions = {};\n\nexport const useStore = () => {\n    const setStore = useState(global)[1];\n\n    const dispatch = (actionType, payload) => {\n        const newState = actions[actionType](globalState, payload);\n        globalState = { ...globalState, ...newState };\n\n        for (let listener of listeners)\n            listener(globalState);\n    };\n\n    useEffect(() => {\n        listeners.push(setStore);\n\n        return (() => {\n            listeners.filter(listener => listener !== setStore);\n        });\n\n    }, [setStore]);\n\n    return [globalState, dispatch];\n};\n\nexport const initStore = (userActions, initialStore) => {\n    globalState = { ...globalState, ...initialStore };\n    actions = { ...actions, ...userActions };\n}\n","import React from 'react';\nimport './navigation.scss';\n\nconst navigation = () => {\n    return (\n        <div className='navigation' >\n            <div className='logo' >\n                <h2> OG </h2>\n                <div className='seperator' />\n                <p> Gradients </p>\n            </div>\n        </div>\n    )\n};\n\nexport default navigation;","import React from 'react';\nimport './gradient-box.scss';\n\nconst gradient_box = (props) => {\n\n    return (\n        <div className='box'>\n            <div className='top' >\n                <p> {props.name} </p>\n                <p> {props.id} </p>\n            </div>\n\n            <img\n                alt=''\n                style={{ backgroundImage: `linear-gradient(45deg, #${props.colors[0]} 0%, #fad0c4 99%, #${props.colors[1]} 100%)` }}\n                className='gradientDisplay' />\n\n            <div className='bottom' >\n                <p> {`#${props.colors[0]} --> #${props.colors[1]}`} </p>\n                <p> Copy CSS </p>\n            </div>\n        </div>\n    );\n};\n\nexport default gradient_box;","import React from 'react';\nimport './gradient-container.scss';\nimport { useStore } from '../../hooks/store';\n\nimport GradientBox from '../../components/gradient-box/gradient-box';\n\nconst Gradient_container = (props) => {\n\n    const state = useStore()[0];\n\n    const gradientBoxes = state.gradients.map(element => <GradientBox key={element.id} id={element.id} name={element.name} colors={element.colors} />)\n\n    return (\n        <div className='container' >\n            {gradientBoxes}\n        </div>\n    );\n\n};\n\nexport default Gradient_container;","import React from 'react';\nimport './App.css';\nimport Navigation from './components/navigation/navigation';\nimport GradientContainer from './containers/gradients-container/gradient-container';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <Navigation />\n      <GradientContainer />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {initStore} from './store';\n\nconst configureStore = () => {\n\n    const actions = () => {\n        /* SET_GRADIENTS: (curState, payload) => { } */\n    }\n    \n    initStore(actions, {\n        gradients: [\n            {id: '001', name: 'Warm Flame', colors: ['ff9a9e', 'fad0c4'] },\n            {id: '002', name: 'Night Fade', colors: ['a18cd1', 'fbc2eb'] },\n            {id: '003', name: 'Spring Warmth', colors: ['fad0c4', 'ffd1ff'] },\n            {id: '004', name: 'Juicy Peach', colors: ['ffecd2', 'fcb69f'] },\n            {id: '005', name: 'Lady Lips', colors: ['ff9a9e', 'fecfef'] },\n            {id: '006', name: 'Sunny Morning', colors: ['f6d365', 'fda085'] },\n        ]\n    });\n};\n\nexport default configureStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configureGradientStore from './hooks/gradients-store';\n\nconfigureGradientStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}